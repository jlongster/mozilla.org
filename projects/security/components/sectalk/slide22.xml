<?xml-stylesheet href="slides.css" type="text/css"?><!DOCTYPE Slide>


<Slide xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink">

  <html:div style="background: black none repeat scroll 0%;" align="center">
  <html:img src="images/mozilla-banner.gif" width="600" height="58" id="logo"/>
  </html:div>

  <SlideBody>
    <Heading>
    Common Pitfalls: C++
    </Heading>
    <BodyText>
        Many crashes can be turned into exploits by a determined attacker. 
    Unstable code and bad memory management lead to exploits. Conversely,
    robust code is also more secure.
    </BodyText>
    <List>
    <ListItem>
    Calling free() on an already-freed or otherwise invalid pointer can lead
    to an exploit - buffer overruns can happen on the heap as well as the stack.
    </ListItem>
    <ListItem>
    Finding buffer overruns is not as simple as changing strcpy() to strncpy().
    Often they are much more subtle.
    </ListItem>
    <ListItem>
    We should include looking for buffer overruns as part of our code review
    criteria, and make sure engineers know what to look for.
    </ListItem>
    </List>
  </SlideBody>

  <Bar>
    <LeftSide>
    <TitleInBar>22/25</TitleInBar>
    </LeftSide>
    <RightSide>
    <html:form>
<html:input type="button" id="magic" value="Prev" onclick="Prev(document);"/>
<html:input type="button" id="magic" value="Next" onclick="Next(document);"/>
    </html:form>
    </RightSide>
  </Bar>
  <html:script src="slides.js"/>

</Slide>
<!-- vim: set sw=2 ts=2: -->