<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<!-- Descrpt: Test nsIAccessible Interface method for XUL progressmeter Node
   - Author: jessie.li@sun.com
   - Copyright (C) 2002 Sun Microsystems Inc.  All Rights Reserved.
   -->
  
<window
     id="test-window"
     title="test"
     orient="horizontal"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script src="accessibility.js"/>
    
 <html:script>
  <![CDATA[
  
  function getDomNodeValue()
{
 try{
  netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

  var node = document.getElementsByTagName("progressmeter").item(0);
  return node;
   }
 catch(e){
  alert("Exception: " + e);
 }
}

function executeTestCase()
{
  var domNode = getDomNodeValue();
  if(domNode == null)
  {
    res = res + "Could not get the DOM Node";
  }
  else
  { //else1
    accNode = getAccessibleValueNode(domNode);
    if(accNode == "Exception")
    {
      res = res + "The Node you selected is not an Accessible Node";
    }
    else
    { //else2
     try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
        
      setTimeout("constructResults();", 2000);
     }
     catch(e){
      alert("Exception**: " + e);
     }
    }//else2
  } //else1
}

function constructResults()
{
 try{
   netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
   netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

   var maxValue = accNode.maximumValue;
   var minValue = accNode.minimumValue;
   var currentValue_1 = accNode.currentValue;
   setCurrentValue = accNode.setCurrentValue(0.8);
   var currentValue_2 = accNode.currentValue;
   
   var expectedMaxValue ="1";
   var expectedMinValue = "0";
   var expectedCurrentValue_1 = "0.5";
   var expectedCurrentValue_2 = "0.8";
   var expectedSetCurrentValue = true;

   var row0 = new Array("Property/Method", "Expected Values", "Actual Values", "Result");
   var row1 = new Array("maxValue->", expectedMaxValue, maxValue);
   var row2 = new Array("minValue->", expectedMinValue, minValue);
   var row3 = new Array("currentValue_1->", expectedCurrentValue_1, currentValue_1);
   var row4 = new Array("currentValue_2->", expectedCurrentValue_2, currentValue_2);
   var row5 = new Array("setCurrentValue->", expectedSetCurrentValue, setCurrentValue);   

   if (maxValue == expectedMaxValue)                               row1[3] = "PASS"; else row1[3] = "FAIL";
   if (minValue == expectedMinValue)                               row2[3] = "PASS"; else row2[3] = "FAIL";
   if (currentValue_1 == expectedCurrentValue_1)                   row3[3] = "PASS"; else row3[3] = "FAIL";
   if (Math.abs(currentValue_2 - expectedCurrentValue_2) < (10E-5))     row4[3] = "PASS"; else row4[3] = "FAIL";
   if (setCurrentValue == expectedSetCurrentValue)                 row5[3] = "PASS"; else row5[3] = "FAIL";
   

   res += "<table border cols=4 width='70%'>";
   res += "<tr>";
   for(col=0; col<4; col++)
     res += "<td><b>" + row0[col] + "</b></td>";
   res += "</tr>";
   res += "<tr>";
   for(col=0; col<4; col++)
   {
    if(row1[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row1[col] + "</td>";
    else
     res += "<td>" + row1[col] + "</td>";
   }
   res += "</tr>";
   res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row2[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row2[col] + "</td>";
    else
     res += "<td>" + row2[col] + "</td>";
   }
   res += "</tr>";
   res += "<tr>";
   for(col=0; col<4; col++)
   {
    if(row3[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row3[col] + "</td>";
    else
     res += "<td>" + row3[col] + "</td>";
   }
   res += "</tr>";
      res += "<tr>";
   for(col=0; col<4; col++)
   {
    if(row4[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row4[col] + "</td>";
    else
     res += "<td>" + row4[col] + "</td>";
   }
   res += "</tr>";
   res += "<tr>";
   for(col=0; col<4; col++)
   {
    if(row5[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row5[col] + "</td>";
    else
     res += "<td>" + row5[col] + "</td>";
   }
   res += "</tr>";
   res += "</table>";
      
   displayResults(res);
  
 }
 catch(e){
  alert("Exception**: " + e);
 }
}
  
  ]]>
  </html:script>
<vbox>    
 <description>
    Testing XUL progressmeter for Accessibility
 </description>
 <spacer flex="1"/>
 <description>
    This is a progress bar. It's initial value is 50%.
 </description>
<progressmeter mode="determined"  value="50%"/>
</vbox>

<iframe id="iframe" class="iframe" type="content"
            flex="1" context="outputContext"/>
<html:script>
  <![CDATA[
    res = "<b><u> Results for XUL progressmeter Node:</u></b><br><br>";

    setTimeout("executeTestCase();", 2000);
  ]]>
  </html:script>
  
  
    
</window>

