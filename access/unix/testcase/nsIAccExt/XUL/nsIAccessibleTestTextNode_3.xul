<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<!-- Descrpt: Test nsIAccessibleText Interface method(boundaryType = 5,6)
   - (getText,getTextAfterOffset,getTextAtOffset,getTextBeforeOffset)
   - Author: jessie.li@sun.com
   - Copyright (C) 2002 Sun Microsystems Inc.  All Rights Reserved.
   -->
  
<window
     id="test-window"
     title="test"
     orient="horizontal"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    
 <script src="accessibility.js"/>
    
 <html:script>
  <![CDATA[
  
function getDomNodeText()
{
 try{
  netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

  var node = document.getElementsByTagName("description").item(0);
  node = node.firstChild;
  //node = node.firstChild;
  return node;
   }
 catch(e){
  alert("Exception: " + e);
 }
}

function executeTestCase()
{
  var domNode = getDomNodeText();
  if(domNode == null)
  {
    res = res + "Could not get the DOM Node";
    
  }
  else
  { //else1
    accNode = getAccessibleTextNode(domNode);
    if(accNode == "Exception")
    {
      res = res + "The Node you selected is not an Accessible Node";
      
    }
    else
    { //else2
     try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                 
      setTimeout("constructResults();", 2000);
     }
     catch(e){
      alert("Exception**: " + e);
     }
    }//else2
  } //else1
}

function constructResults()
{
 try{
   netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
   netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

   var afterStart = {};
   var afterEnd = {};
   var atStart = {};
   var atEnd = {};
   var beforeStart = {};
   var beforeEnd = {};
   
   var getTextAfterOffset = accNode.getTextAfterOffset(103,5,afterStart,afterEnd);
   var getTextAtOffset = accNode.getTextAtOffset(103,5,atStart,atEnd);
   var getTextBeforeOffset = accNode.getTextBeforeOffset(103,5,beforeStart,beforeEnd);
   
   var expectedGetTextAfterOffset = "and testing of the browser by providing";
   var expectedGetTextAtOffset = "and portability. We coordinate the development";
   var expectedGetTextBeforeOffset = "designed for standards compliance, performance";
   
   var expectedAfterStart = "133";
   var expectedAfterEnd = "172";
   var expectedAtStart = "86";
   var expectedAtEnd = "132";
   var expectedBeforeStart = "39";
   var expectedBeforeEnd = "85";
   
   var row0 = new Array("Property/Method", "Expected Values", "Actual Values", "Result");
   var row1 = new Array("getTextAfterOffset->", expectedGetTextAfterOffset, getTextAfterOffset);
   var row2 = new Array("getTextAtOffset->", expectedGetTextAtOffset, getTextAtOffset);
   var row3 = new Array("getTextBeforeOffset->", expectedGetTextBeforeOffset, getTextBeforeOffset);
   var row4 = new Array("afterStart->", expectedAfterStart, afterStart.value);
   var row5 = new Array("afterEnd->", expectedAfterEnd, afterEnd.value);
   var row6 = new Array("atStart->", expectedAtStart, atStart.value);
   var row7 = new Array("atEnd->", expectedAtEnd, atEnd.value);
   var row8 = new Array("beforeStart->", expectedBeforeStart, beforeStart.value);
   var row9 = new Array("beforeEnd->", expectedBeforeEnd, beforeEnd.value);
   
   if (getTextAfterOffset == expectedGetTextAfterOffset)               row1[3] = "PASS"; else row1[3] = "FAIL";
   if (getTextAtOffset == expectedGetTextAtOffset)                     row2[3] = "PASS"; else row2[3] = "FAIL";
   if (getTextBeforeOffset == expectedGetTextBeforeOffset)             row3[3] = "PASS"; else row3[3] = "FAIL";
   if (afterStart.value == expectedAfterStart)                           row4[3] = "PASS";  else row4[3] = "FAIL";
   if (afterEnd.value == expectedAfterEnd)                               row5[3] = "PASS"; else row5[3] = "FAIL";
   if (atStart.value == expectedAtStart)                                 row6[3] = "PASS"; else row6[3] = "FAIL";
   if (atEnd.value == expectedAtEnd)                                     row7[3] = "PASS"; else row7[3] = "FAIL";
   if (beforeStart.value == expectedBeforeStart)                         row8[3] = "PASS"; else row8[3] = "FAIL";
   if (beforeEnd.value == expectedBeforeEnd)                             row9[3] = "PASS"; else row9[3] = "FAIL";
   
   res += "<table border cols=4 width='70%'>";
   res += "<tr>";
   for(col=0; col<4; col++)
     res += "<td><b>" + row0[col] + "</b></td>";
   res += "</tr>";
   res += "<tr>";
   for(col=0; col<4; col++)
   {
    if(row1[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row1[col] + "</td>";
    else
     res += "<td>" + row1[col] + "</td>";
   }
   res += "</tr>";
   res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row2[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row2[col] + "</td>";
    else
     res += "<td>" + row2[col] + "</td>";
   }
   res += "</tr>";
    res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row3[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row3[col] + "</td>";
    else
     res += "<td>" + row3[col] + "</td>";
   }
   res += "</tr>";
    res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row4[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row4[col] + "</td>";
    else
     res += "<td>" + row4[col] + "</td>";
   }
   res += "</tr>";
    res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row5[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row5[col] + "</td>";
    else
     res += "<td>" + row5[col] + "</td>";
   }
   res += "</tr>";
    res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row6[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row6[col] + "</td>";
    else
     res += "<td>" + row6[col] + "</td>";
   }
   res += "</tr>";
   res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row7[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row7[col] + "</td>";
    else
     res += "<td>" + row7[col] + "</td>";
   }
   res += "</tr>";
    res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row8[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row8[col] + "</td>";
    else
     res += "<td>" + row8[col] + "</td>";
   }
   res += "</tr>";
    res += "<tr>";
  for(col=0; col<4; col++)
   {
    if(row9[col] == "FAIL")
     res += "<td bgcolor='#FF0000'>" + row9[col] + "</td>";
    else
     res += "<td>" + row9[col] + "</td>";
   }
   res += "</tr>";
   res += "</table>";

   displayResults(res);
 }
 catch(e){
  alert("Exception**: " + e);
 }
}

 
  ]]>
  </html:script>
    
  <html:br/>
   <html:div>
     <html:p>
       This test case is to test XUL text for Accessibility:             
     </html:p>
     <html:table  width="340">
  <html:tbody>
<html:tr>
<html:td>
  <html:font face="Courier New, Courier, monospace">
  <description>
  Mozilla is an open-source web browser, designed for standards compliance, performance and portability. We coordinate the development and testing of the browser by providing discussion forums, software engineering tools, releases and bug tracking.
  </description>
  </html:font>
  </html:td>
  
  </html:tr>
  </html:tbody>
  </html:table>
   </html:div>

   <iframe id="iframe" class="iframe" type="content"
            flex="1" context="outputContext"/>
  <html:script>
  <![CDATA[
  
    res = "<b><u> Results for XUL description Node:</u></b><br><br>";
    setTimeout("executeTestCase();", 2000);
  ]]>
  </html:script>
    
</window>

